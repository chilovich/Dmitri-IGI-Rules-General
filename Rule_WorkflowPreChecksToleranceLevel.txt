Name: Refuse risky request if risk tolerance=BLOCK

when
    request : SwimRequestBean(  )
then
// Revoke request on tolerance Risk Level

logger.info("Request n. " + request.getId());

SwimRequestDAO swr = new SwimRequestDAO(logger);
swr.setDAO(sql);
request = swr.findRequestDetail(request);

Integer reqStatus = request.getReqstatus();
if (reqStatus != null && reqStatus.equals(RequestStatus.ESCALATION.getCode())) {

	List<SwimEntitlementBean> listToRem = request.getRolesToRemove();
	List<SwimEntitlementBean> listToAdd = request.getRolesToAdd();

	logger.info("listToRem " + listToRem.size());
	logger.info("listToAdd " + listToAdd.size());
	
	SwimConverter2PM converter = new SwimConverter2PM();
	BeanList<EntitlementBean> entToAdd = converter.listSwim2PM(listToAdd);
	BeanList<EntitlementBean> entToRem = converter.listSwim2PM(listToRem);

	logger.info("EntToRem " + entToRem.size());
	logger.info("EntToAdd " + entToAdd.size());

	Long beneficiaryId = request.getBeneficiary_id();
	UserBean userBean = new UserBean();
	userBean.setId(beneficiaryId);
	
	CheckRiskDAO riskDao = new CheckRiskDAO(logger);
	riskDao.setDAO(sql);

	RiskInfoFull riskInfoFull = riskDao.checkUserFull(userBean, entToAdd, entToRem, null, false);
	List<RiskBean> lRiskBean = riskInfoFull.getAfter().getAllRisk();
	
	if (lRiskBean == null || lRiskBean.isEmpty()) {
		logger.info("No risk, skip! ");
		return;
	}
	
	for (RiskBean riskBean : lRiskBean) {
		
		RiskDAO lrb = new RiskDAO(logger);
		lrb.setDAO(sql);
		
		riskBean = (RiskBean) lrb.checkAB(riskBean, true);
		
		String currentTolerance = riskBean.getTolerance();
		
		logger.info("Current risk: " + riskBean.getName());				
		logger.info("Current tolerance: " + currentTolerance);
		
		if (currentTolerance != null &&  currentTolerance.equals("BLOCK")) {

			logger.info("BLOCK FOUND!");
			
			UserBean userApplicantBean = new UserBean();
			userApplicantBean.setCode(request.getApplicant_userid());
			
			AuthorizeIncompatibility authDao = new AuthorizeIncompatibility(logger);
			authDao.setDAO(sql);
			
			authDao.initialize("IDEAS", request.getEscalationPermission(), userApplicantBean);
			authDao.authorize(request, false);
			
			return;
		}
	}
}